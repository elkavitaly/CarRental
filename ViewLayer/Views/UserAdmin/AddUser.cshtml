@model ViewLayer.Models.UserRegisterViewModel
@{ Layout = "~/Views/Shared/_LayoutAdmin.cshtml"; }

@Styles.Render("~/Content/adminstyle.css")
@Scripts.Render("~/Scripts/")

<div class="register-form">
    @using (Html.BeginForm("Users", "UserAdmin", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        <div class="flex-container">
            @Html.LabelFor(m => m.Email, new {@class = "register-label"})
            <div class="register-input">
                @Html.EditorFor(m => m.Email)
                @Html.ValidationMessageFor(m => m.Email)
            </div>
        </div>
        <div class="flex-container">
            @Html.LabelFor(m => m.Password, new {@class = "register-label"})
            <div class="register-input">
                @Html.EditorFor(m => m.Password, new {@type = "password"})
                @Html.ValidationMessageFor(m => m.Password, "")
            </div>
        </div>
        <div class="flex-container">
            @Html.LabelFor(m => m.ConfirmPassword, new {@class = "register-label"})
            <div class="register-input">
                @Html.EditorFor(m => m.ConfirmPassword)
                @Html.ValidationMessageFor(m => m.ConfirmPassword, "")
            </div>
        </div>
        <div class="flex-container">
            @Html.LabelFor(m => m.Roles, new {@class = "register-label"})
            <div class="add-roles">
                <select class="select-role" name="Role">
                    @foreach (var role in (IEnumerable<string>) ViewBag.Roles)
                    {
                        <option value="@role">@role</option>
                    }
                </select>
                <div>
                    <button type="button" class="role-add btn-admin">Add role</button>
                </div>
            </div>
        </div>
        <div class="role-list"></div>
        <div class="register-btn-section">
            <button type="button" class="btn-register">Register</button>
        </div>
    }
</div>

<script>
    let addButton = document.querySelector(".role-add");
    addButton.onclick = add;
    
    let form = document.querySelector(".btn-register");
    form.onclick = submitForm;
    
    document.querySelector("#Password").onchange = checkPassword;
    
    function checkPassword() {
        let value = this.value;
        let request = new XMLHttpRequest();
        request.open("POST", '@Url.Action("ValidatePassword")?password=' + value);
        request.send();
        request.onreadystatechange = function(){
            if(request.readyState === 4 && request.status === 200){
                validateMessage(request.responseText);
            }
        }
        
    }
    
    function validateMessage(value){
        let node = document.querySelector("#Password").parentNode;
        let error = node.querySelector(".field-validation-error");
        if(error){
            node.removeChild(error);
        }
        
        if(value === "False"){
            
            let message = document.createElement("span");
            message.appendChild(document.createTextNode("The password must have at least one non-alphanumeric or non-numeric character. The password must have at least one digit (0-9). The password must have at least one uppercase character (A-Z)"));
            message.className = "field-validation-error";
            node.appendChild(message)
        }
    }
        
    function add(){
        let selectValue = document.querySelector(".select-role").value;
        let list = document.querySelector(".role-list");
        let nodeList = list.querySelectorAll(".role-row");
        
        let flag = true;
        for(let elem of nodeList){
            if(elem.getAttribute("id") === selectValue){
                flag = false;
                break;
            }
        }
        
        if(flag === false){
            return;
        }
        
        let roleRow = document.createElement("div");
        roleRow.className = "role-row";
        roleRow.setAttribute("id", selectValue);
        
        let roleName = document.createElement("div");
        roleName.className = "role-name Roles";
        roleName.setAttribute("name", "Roles");
        roleName.setAttribute("value", selectValue);
        roleName.appendChild(document.createTextNode(selectValue));
        
        let rowDelete = document.createElement("div");
        let button = document.createElement("button");
        button.className = "role-delete btn-admin";
        button.setAttribute("type", "button");
        button.value = selectValue;
        button.appendChild(document.createTextNode("Delete"));
        button.onclick = deleteRole;
        
        rowDelete.appendChild(button);
        roleRow.appendChild(roleName);
        roleRow.appendChild(rowDelete);
        list.appendChild(roleRow); 
    }
    
    function deleteRole(){
        let value = this.value;
        let roleList = document.querySelector(".role-list");
        let select = document.getElementById(value);       
        roleList.removeChild(select);
    }
    
    function submitForm(){
        let email = document.querySelector("#Email").value;
        let password = document.querySelector("#Password").value;
        let confirmPassword = document.querySelector("#ConfirmPassword").value;
        let errors = document.querySelectorAll(".field-validation-error");
        let flag = true;
        for(let error of errors){
            if(error.firstChild){
                flag = false;
            }
        }
        if(!flag){
            return;
        }
        let roles = document.querySelectorAll(".Roles");
        let roleNames = [];
        
        for(let elem of roles){
            roleNames.push(elem.getAttribute("value"));
        }
        
        let obj = {Email: email, Password: password, ConfirmPassword: confirmPassword, Roles: roleNames};
        request('@Url.Action("AddUser")', JSON.stringify(obj));
        document.querySelector("form").submit();
    }
    
    function request(url, data){
        let request = new XMLHttpRequest();
        request.open("post", url);
        request.send(data);
    }
    
</script>